@book{alma991001697099707681,
keywords = {Procesamiento electrónico de datos -- Procesamiento distribuido},
language = {eng},
lccn = {2008274939},
author = {Kshemkalyani, Ajay D. and Singhal, Mukesh},
address = {Cambridge ;},
booktitle = {Distributed computing : principles, algorithms, and systems},
isbn = {9780521876346},
publisher = {Cambridge University Press},
title = {Distributed computing : principles, algorithms, and systems },
year = {2008},
}

@article{RajRajendraK.1991EAgp,
issn = {0038-0644},
journal = {Software, practice & experience},
keywords = {Software},
language = {eng},
number = {1},
abstract = {Emerald is a general‐purpose language with aspects of traditional object‐oriented languages, such as Smalltalk, and data type languages, such as Modula‐2 and Ada. It is strongly typed with a non‐traditional object model and type system that emphasize types, allow separation of typing and implementation, and provide the flexibility of polymorphism and subtyping with compile‐time checking. This paper describes the Emerald language and its programming methodology. We give examples that demonstrate Emerald's features, and compare and contrast the Emerald approach to programming with the approaches used in other similar languages.},
author = {Raj, Rajendra K. and Tempero, Ewan and Levy, Henry M. and Black, Andrew P. and Hutchinson, Norman C. and Jul, Eric},
address = {New York},
copyright = {Copyright © 1991 John Wiley & Sons, Ltd},
pages = {91-118},
publisher = {John Wiley & Sons, Ltd},
title = {Emerald: A general-purpose programming language},
volume = {21},
year = {1991},
}


@article{JulEric1988Fmit,
issn = {0734-2071},
journal = {ACM transactions on computer systems},
language = {eng},
number = {1},
abstract = {Emerald is an object-based language and system designed for the construction of distributed programs. An explicit goal of Emerald is support for object mobility; objects in Emerald can freely move within the system to take advantage of distribution and dynamically changing environments. We say that Emerald has fine-grained mobility because Emerald objects can be small data objects as well as process objects. Fine-grained mobility allows us to apply mobility in new ways but presents implementation problems as well. This paper discusses the benefits of tine-grained mobility, the Emerald language and run-time mechanisms that support mobility, and techniques for implementing mobility that do not degrade the performance of local operations. Performance measurements of the current implementation are included.},
author = {Jul, Eric and Levy, Henry and Hutchinson, Norman and Black, Andrew},
pages = {109-133},
publisher = {ACM},
title = {Fine-grained mobility in the Emerald system},
volume = {6},
year = {1988},
}



@inproceedings{BlackAndrew2007Tdot,
keywords = {Migration, Internal ; Eden ; Washington},
language = {eng},
abstract = {Emerald is an object-based programming language and system designed and implemented in the Department of Computer Science at the University of Washington in the early and mid-1980s. The goal of Emerald was to simplify the construction of distributed applications. This goal was reflected at every level of the system: its object structure, the programming language design, the compiler implementation, and the run-time support.
This paper describes the origins of the Emerald group, the forces that formed the language, the influences that Emerald has had on subsequent distributed systems and programming languages, and some of Emerald's more interesting technical innovations.},
author = {Black, Andrew and Hutchinson, Norman and Jul, Eric and Levy, Henry},
booktitle = {Proceedings of the third ACM SIGPLAN conference on history of programming languages},
isbn = {1595937668},
pages = {11-1-11-51},
publisher = {ACM},
title = {The development of the Emerald programming language},
year = {2007},
}


@book{alma991003995329707681,
keywords = {Parallel processing (Electronic computers)},
language = {eng},
author = {Agha, Gul A.},
address = {Cambridge, Mass},
booktitle = {Actors a model of concurrent computation in distributed systems},
isbn = {9780262255554},
publisher = {MIT Press},
series = {The MIT Press series in artificial intelligence},
title = {Actors a model of concurrent computation in distributed systems },
year = {1986},
}

@book{alma991005271676907681,
edition = {1st edition},
abstract = {Internet of Things: Principles and Paradigms captures the state-of-the-art research in Internet of Things, its applications, architectures, and technologies. The book identifies potential future directions and technologies that facilitate insight into numerous scientific, business, and consumer applications. The Internet of Things (IoT) paradigm promises to make any electronic devices part of the Internet environment. This new paradigm opens the doors to new innovations and interactions between people and things that will enhance the quality of life and utilization of scarce resources. To help realize the full potential of IoT, the book addresses its numerous challenges and develops the conceptual and technological solutions for tackling them. These challenges include the development of scalable architecture, moving from closed systems to open systems, designing interaction protocols, autonomic management, and the privacy and ethical issues around data sensing, storage, and processing. Addresses the main concepts and features of the IoT paradigm Describes different architectures for managing IoT platforms Provides insight on trust, security, and privacy in IoT environments Describes data management techniques applied to the IoT environment Examines the key enablers and solutions to enable practical IoT systems Looks at the key developments that support next generation IoT platforms Includes input from expert contributors from both academia and industry on building and deploying IoT platforms and applications},
author = {Buyya, Rajkumar and Vahid Dastjerdi, Amir},
address = {Cambridge, MA},
booktitle = {Internet of things : principles and paradigms},
isbn = {0-12-809347-1},
keywords = {Internet of things},
language = {eng},
publisher = {Morgan Kaufmann},
series = {Gale eBooks},
title = {Internet of things : principles and paradigms },
year = {2016 - 2016},
}

@misc{KAFKA2015,
  author = {Kafka, Peter},
  title = {YouTube Revamps Its Android App With Vertical Video (Updated)},
  howpublished = {\url{https://www.vox.com/2015/7/23/11615020/youtube-revamps-its-android-app-with-vertical-video-tells-iphone}},
  year = {2015},
  month = {Jul},
  day = {23},
  note = {Accessed: 2023-04-01}
}

@article{MILNER19921,
title = {A calculus of mobile processes, I},
journal = {Information and Computation},
volume = {100},
number = {1},
pages = {1-40},
year = {1992},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(92)90008-4},
url = {https://www.sciencedirect.com/science/article/pii/0890540192900084},
author = {Robin Milner and Joachim Parrow and David Walker},
abstract = {We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.}
}